{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qfibonacci\n:maxdepth: 2\n:caption: Contents:\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Q\"fizz\" → if \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is divisible by \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\"buzz\" → if \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is divisible by \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n\"fizz buzz\" → if \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is divisible by \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\nstring rep.\\E$"}
{"rule":"UNLIKELY_OPENING_PUNCTUATION","sentence":"^\\Q:param \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q: Value to parse such that \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n:type \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q: \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n:return: Return \"fizz\", \"buzz\", or \"fizz buzz\" depending on \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n:rtype: \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n:raises:\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q → if \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is not \\E(?:Dummy|Ina|Jimmy-)[0-9]+$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q:param \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q: Value to parse such that \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n:type \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q: \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n:return: Return \"fizz\", \"buzz\", or \"fizz buzz\" depending on \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n:rtype: \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\n:raises:\n\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q → if \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is not \\E(?:Dummy|Ina|Jimmy-)[0-9]+$"}
